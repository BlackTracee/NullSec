import requests
from pprint import pprint
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin

print ('''
           [?] Ferramenta básica de localização de vulnerabilidades XSS [?]
                      código do BlackTrace
       ''')
def get_all_forms(url):
    """Dada uma `url`, ele retorna todos os formulários do conteúdo HTML"""
    soup = bs(requests.get(url).content, "html.parser")
    return soup.find_all("form")
def get_form_details(form):
    """
    Esta função extrai todas as informações úteis possíveis sobre um formulário HTML`
    """
    details = {}
    action = form.attrs.get("action", "").lower()
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("tipo", "text")
        input_name = input_tag.attrs.get("nome")
        inputs.append({"tipo": input_type, "nome": input_name})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details
def submit_form(form_details, url, value):
    """
    Envia um formulário fornecido em `form_details`
    Parâmetros:
        form_details (lista): um dicionário que contém informações do formulário
        url (str): a URL original que contém esse formulário
        valor (str): será substituído por todas as entradas de texto e pesquisa
    Retorna a resposta HTTP após o envio do formulário
    """
    target_url = urljoin(url, form_details["action"])
    inputs = form_details["inputs"]
    data = {}
    for input in inputs:
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            data[input_name] = input_value

    print(f"[+] Enviando carga maliciosa para {target_url}")
    print(f"[+] Dados: {data}")
    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)
    
def scan_xss(url):
    """
    Dado um 'url', ele imprime todos os formulários vulneráveis XSS e 
    retorna True se algum for vulnerável, False caso contrário
    """
    forms = get_all_forms(url)
    print(" ")
    print(f"[+] Detectado {len(forms)} formulários em {url}.")
    js_script = "<Script>alert('Oi')</scripT>"
    is_vulnerable = False
    for form in forms:
        form_details = get_form_details(form)
        content = submit_form(form_details, url, js_script).content.decode()
        if js_script in content:
            print(f"[+] XSS detectado em {url}")
            print(f"[*] Detalhes do formulário:")
            pprint(form_details)
            is_vulnerable = True
    return is_vulnerable
if __name__ == "__main__":
    url = input ("NullSec pede para você inserir o parâmetro: ")
    print(scan_xss(url))
print(" ")
print ("[*] Scan Completo")  
print (" ")  
input ("Enter para continuar...")    